stages:
  - test

selenium-chrome-test:
  image: python:3.11
  stage: test
  services:
    - name: selenium/standalone-chrome:latest
      alias: selenium
  before_script:
    # Aggiorna e installa dipendenze
    - apt-get update && apt-get install -y git npm curl

    # Avvia il backend
    - pip install -r requirements.txt
    - export DATABASE_URL=postgresql://neondb_owner:npg_ShCmBD0uPd3Q@ep-icy-sky-af3pjvf1.c-2.us-west-2.aws.neon.tech/neondb
    - export DECODE_JWT_TOKEN='blablabla'
    - python -m src &

    # Aspetta che il backend sia pronto su localhost:8080
    - |
      until curl -s http://127.0.0.1:8080 > /dev/null; do
        echo "⏳ Aspetto che il BE parta su 127.0.0.1:8080..."
        sleep 2
      done

    # Clona il frontend
    - git clone -b new-pytest https://$CI_FE_USERNAME:$CI_FE_TOKEN@gitlab.com/generic-lab/italco/italco-fe.git frontend

    # Installa frontend e builda
    - cd frontend
    - npm install
    - export VITE_HOSTNAME=http://127.0.0.1:8080
    - npm run build || exit 1
    - npm run serve &

    # Torna nella root
    - cd ..

    # Attende che il frontend sia pronto su localhost:3000 (dentro container CI)
    - |
      until curl -s http://127.0.0.1:3000 > /dev/null; do
        echo "⏳ Aspetto che il FE parta su localhost:3000..."
        sleep 2
      done

    # Clona la repo dei test
    - git clone -b italco-test https://$CI_GENERIC_TEST_USERNAME:$CI_GENERIC_TEST_TOKEN@gitlab.com/generic-lab/generics/generic-test.git generic-test
    - cd generic-test
    - pip install -r ./requirements.txt

  script:
    # Qui export con host.docker.internal per Selenium che è un container separato
    - export VITE_HOSTNAME_ITALCO_FE=http://host.docker.internal:3000
    - pytest -s ./tests/italco/test_login.py

  only:
    - branches
 