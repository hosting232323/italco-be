"""motivation

Revision ID: 998749e2809b
Revises: 9b11ccdaf5ad
Create Date: 2025-09-20 11:28:16.809783

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '998749e2809b'
down_revision: Union[str, None] = '9b11ccdaf5ad'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
  # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('geographic_code')
    op.drop_table('service')
    op.drop_table('service_user')
    op.drop_table('geographic_zone')
    op.drop_table('schedule')
    op.drop_table('transport')
    op.drop_table('collection_point')
    op.drop_table('photo')
    op.drop_table('delivery_group')
    op.drop_table('order_service_user')
    op.drop_table('italco_user')
    op.drop_table('customer_group')
    op.drop_table('customer_rule')
    op.drop_table('constraints')
    op.drop_table('order')
    # ### end Alembic commands ###


def downgrade() -> None:
  # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('order',
    sa.Column('status', postgresql.ENUM('PENDING', 'IN_PROGRESS', 'ON_BOARD', 'COMPLETED', 'CANCELLED', 'AT_WAREHOUSE', name='orderstatus'), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('DELIVERY', 'WITHDRAW', 'REPLACEMENT', 'CHECK', name='ordertype'), autoincrement=False, nullable=False),
    sa.Column('addressee', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('addressee_contact', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cap', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('dpc', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('drc', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('booking_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('assignament_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('customer_note', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('operator_note', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('motivation', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('schedule_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('collection_point_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('schedule_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_time_slot', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('end_time_slot', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('anomaly', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('delay', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('order_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('signature', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collection_point_id'], ['collection_point.id'], name='order_collection_point_id_fkey'),
    sa.ForeignKeyConstraint(['schedule_id'], ['schedule.id'], name='order_schedule_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='order_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('constraints',
    sa.Column('zone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_orders', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['zone_id'], ['geographic_zone.id'], name=op.f('constraints_zone_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('constraints_pkey'))
    )
    op.create_table('customer_rule',
    sa.Column('day_of_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_orders', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['italco_user.id'], name=op.f('customer_rule_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('customer_rule_pkey'))
    )
    op.create_table('customer_group',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('customer_group_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='customer_group_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('italco_user',
    sa.Column('role', postgresql.ENUM('ADMIN', 'CUSTOMER', 'OPERATOR', 'DELIVERY', name='userrole'), autoincrement=False, nullable=False),
    sa.Column('customer_group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('delivery_group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('pass_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('italco_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_group_id'], ['customer_group.id'], name='italco_user_customer_group_id_fkey'),
    sa.ForeignKeyConstraint(['delivery_group_id'], ['delivery_group.id'], name='italco_user_delivery_group_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='italco_user_pkey'),
    sa.UniqueConstraint('email', name='italco_user_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('order_service_user',
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('service_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], name=op.f('order_service_user_order_id_fkey')),
    sa.ForeignKeyConstraint(['service_user_id'], ['service_user.id'], name=op.f('order_service_user_service_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('order_service_user_pkey'))
    )
    op.create_table('delivery_group',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('lat', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('lon', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('delivery_group_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='delivery_group_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('photo',
    sa.Column('photo', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('mime_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], name=op.f('photo_order_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('photo_pkey'))
    )
    op.create_table('collection_point',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('cap', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['italco_user.id'], name=op.f('collection_point_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('collection_point_pkey'))
    )
    op.create_table('transport',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('plate', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('transport_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='transport_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('schedule',
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('transport_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('delivery_group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['delivery_group_id'], ['delivery_group.id'], name=op.f('schedule_delivery_group_id_fkey')),
    sa.ForeignKeyConstraint(['transport_id'], ['transport.id'], name=op.f('schedule_transport_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('schedule_pkey'))
    )
    op.create_table('geographic_zone',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('geographic_zone_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='geographic_zone_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('service_user',
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['service_id'], ['service.id'], name=op.f('service_user_service_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['italco_user.id'], name=op.f('service_user_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('service_user_pkey'))
    )
    op.create_table('service',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('DELIVERY', 'WITHDRAW', 'REPLACEMENT', 'CHECK', name='ordertype'), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('max_services', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('service_pkey'))
    )
    op.create_table('geographic_code',
    sa.Column('zone_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['zone_id'], ['geographic_zone.id'], name=op.f('geographic_code_zone_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('geographic_code_pkey'))
    )
    # ### end Alembic commands ###
