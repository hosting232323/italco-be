stages:
  - prepare
  - test

image: hosting23232323/python-node:3.11

variables:
  POSTGRES_DB: mydb
  POSTGRES_USER: myuser
  POSTGRES_PASSWORD: mypassword
  DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  DECODE_JWT_TOKEN: token
  GITLAB_PIPELINE: 'true'

fe_dependencies:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "🔐 Login al GitLab Container Registry..."
    - docker login -u "$CI_FE_USERNAME" -p "$CI_FE_TOKEN" registry.gitlab.com
  script:
    - echo "Scarico l'immagine FE..."
    - docker pull registry.gitlab.com/generic-lab/italco/italco-fe:latest
    - docker save registry.gitlab.com/generic-lab/italco/italco-fe:latest -o italco-fe.tar
  artifacts:
    paths:
      - italco-fe.tar
    expire_in: 1h
  tags:
    - linux

test_end_to_end:
  stage: test
  needs:
    - job: fe_dependencies
      artifacts: true
  image: docker:latest
  services:
    - name: postgres:15
      alias: postgres
    - name: selenium/standalone-chromium:latest
      alias: selenium
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker load -i italco-fe.tar
  script:
    - echo "🚀 Avvio Italco FE..."
    - docker run -d --name italco-fe -p 3000:3000 registry.gitlab.com/generic-lab/italco/italco-fe:latest

    - echo "⏳ Aspetto che il FE sia pronto..."
    - until curl -s http://localhost:3000 > /dev/null; do sleep 2; done
    - echo "✅ FE pronto!"

    - echo "Eseguo test base di connessione..."
    - curl -v http://localhost:3000

    - echo "🧹 Pulizia container FE..."
    - docker stop italco-fe
    - docker rm italco-fe
  tags:
    - linux


lint_backend:
  stage: test
  script:
    - pip install ruff
    - ruff check ./src --exit-non-zero-on-fix
    - ruff format ./src --exit-non-zero-on-fix
  tags:
    - linux

